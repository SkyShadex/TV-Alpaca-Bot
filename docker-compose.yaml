version: '3.8'

volumes:
  redis-data:
  graphs:

services:    
  dashboard:
    build:
      context: .
      dockerfile: ./dashboard/Dockerfile
    env_file: vars.env
    ports:
      - "${LOCAL_PORT}:${LOCAL_PORT}"
    volumes:
      - .:/workspace:cached
      - graphs:/app/data/graphs
      - graphs:/app/static/data/graphs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  strategy-manager: &rep1
    build:
      context: .
      dockerfile: ./StrategyManager/Dockerfile
    env_file: vars.env
    volumes:
      - .:/workspace:cached
      - graphs:/app/data/graphs
    depends_on:
      redis:
        condition: service_healthy
      dashboard:
        condition: service_healthy
    deploy:
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "4"
          memory: "5g"
    environment:
      - CONTAINER_ID=1

  b-strategy-manager:
    <<: *rep1
    environment:
      - CONTAINER_ID=2

  c-strategy-manager:
    <<: *rep1
    environment:
      - CONTAINER_ID=3

  d-strategy-manager:
    <<: *rep1
    environment:
      - CONTAINER_ID=4

  portfolio-manager:
    build:
      context: .
      dockerfile: ./PortfolioManager/Dockerfile
    env_file: vars.env
    expose:
      - "5000"
    volumes:
      - .:/workspace:cached
      - graphs:/app/data/graphs
    depends_on:
      redis:
        condition: service_healthy
      dashboard:
        condition: service_healthy
    deploy:
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  risk-manager:
    build:
      context: .
      dockerfile: ./RiskManager/Dockerfile
    env_file: vars.env
    volumes:
      - .:/workspace:cached
      - graphs:/app/data/graphs
    depends_on:
      redis:
        condition: service_healthy
      dashboard:
        condition: service_healthy
    deploy:
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  redis:
    image: redis/redis-stack:latest
    env_file: vars.env
    ports:
      - "8001:8001"
    expose:
      - "${DB_PORT}"
    hostname: "${DB_HOST}"
    volumes:
      - redis-data:/data
    restart: on-failure:10
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 5
  

  # init-common:
  #   build:
  #     context: ./common
  #     dockerfile: Dockerfile
  #   volumes:
  #     - common:/workspace/common

        # init-common:
      #   condition: service_completed_successfully